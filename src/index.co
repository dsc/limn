limn = exports
limn.require = require

limn.{ _, op, emitters, guidFor, compareIds,
} =  { _, op, emitters, guidFor, compareIds, root,
} = limn.util = require './util'


# XXX: These must come after requiring util so it can shim the modules
ko   = require 'knockout'
page = require 'page'


# Set up domReady observable
limn.domReady = ko.observable false
root.jQuery? (limn.$) ->
    limn.domReady true


# Decorate root limn namespace object with EventEmitter methods
emitter = limn.__emitter__ = new emitters.ReadyEmitter()
for k of <[ on addListener off removeListener emit trigger once removeAllListeners ]>
    limn[k] = emitter[k].bind emitter


limn.mount = (path='') ->
    mnt   = limn.config?.mount or '/'
    path .= slice(1)     if '/' == path[0]
    mnt  .= slice(0, -1) if '/' == mnt[mnt.length-1]
    "#mnt/#path"

limn.message   = require './message'

limn.base       = require './base'
limn.data       = require './data'
limn.graph      = require './graph'
limn.dashboard  = require './dashboard'


/**
 * @class Sets up root application, automatically attaching to an existing element
 *  found at `appSelector` and delegating to the appropriate view.
 */
class limn.LimnApp
    VIEWS:
        'dashboards'    : limn.dashboard.DashboardView
        'graphs'        : limn.graph.GraphView
        'datasources'   : limn.data.datasource.DataSourceView
        '404'           : limn.base.NotFoundView
        'loading'       : limn.base.LoadingView
    
    CREATE_VIEWS:
        'graphs'        : limn.graph.GraphCreateView
    
    
    /**
     * Current view.
     * @type ko.observable<View>
     */
    currentView : null
    
    
    
    /**
     * @constructor
     */
    (config) ->
        @currentView = ko.observable()
        
        # automatically update `limn.view`, `limn.model` when view changes
        ko.computed ~>
            obs   = @currentView
            view  = limn.view  = obs()
            model = limn.model = view?.model?()
            [prev, obs.prev] = [obs.prev, view]
            limn.trigger 'app-view-changed', view, prev, limn.app if view
        
        # XXX: Prevent page.js from intercepting clicks on links to datafiles
        window.addEventListener do
            'click'
            (evt) ->
                return unless $ evt.target .is '.graph-raw-data-row a,.not-client-side'
                evt.stopPropagation()
                false
            true # capture phase
        
        # TODO: this binds everything in the whole app, preventing individual graph rendering
        @currentView new limn.base.LoadingView()
        ko.applyBindings this
        
        page '/:view?/:id?/:action?', (context, next) ~>
            { view, id, action } = context.params
            
            # default to the reportcard dashboard
            unless view
                view = 'dashboards'
                id   = 'reportcard'
            
            # if the id is an action, route accordingly
            if _ <[ create list ]> .contains id
                action = id
                id = null
            
            switch action
                case 'create'
                    views = @CREATE_VIEWS
                default
                    views = @VIEWS
            
            if ViewType = views[view]
                @currentView new ViewType id, action
                @scrollTo 0, 0
            else
                next()
        
        page '*', ~>
            @currentView new @VIEWS['404']()
            @scrollTo 0, 0
        
        page()
    
    
    scrollTo: (x=0, y=0) ->
        return false if window.scrollX is x and window.scrollY is y
        window.scrollTo x, y
        true
    
    
    /**
     * @static
     */
    @findConfig = ->
        # TODO: fill out inferred config
        config = root.limn_config or {}
        config.mount or= "/"
        config
    
    
    /**
     * @static
     */
    @main = function limnMain
        config = limn.config or= LimnApp.findConfig()
        limn.app or= new LimnApp config unless config.libOnly
        limn.trigger 'main', limn.app
    



LimnApp.main()
