ko   = require 'knockout'
limn = require 'limn'

{ Model, View,
} = require './base'



export class Message extends Model
    -> super ...
    defaults: ->
        type  : null            # Alert type := null | error | success | info
        icon  : null            # Bootstrap icon class, including 'icon-' prefix as well as 'icon-white' if desired.
        title : null            # Message title
        msg   : ''              # Message body text


# Global message state
export messages = ko.observableArray()


/**
 * Displays a message.
 */
export message = (msg, title, icon, type) ->
    return unless msg or title
    messages.push m = new Message { msg, title, type, icon }
    m

/**
 * Displays an info message.
 */
export info    = (msg, title, icon) -> message msg, title, icon, 'info'

/**
 * Displays a success message.
 */
export success = (msg, title, icon) -> message msg, title, icon, 'success'

/**
 * Displays an error message.
 */
export error   = (msg, title, icon) -> message msg, title, icon, 'error'


## Setup the container
container = limn.$ '<section id="limn-messages" data-bind="template: { name:\'message\', foreach:messages, afterAdd:fadeIn }" />'
    .appendTo limn.$ 'body'
    .on 'closed', '.alert', ->
        messages.remove that if ko.dataFor this

fadeIn = (el) ->
    limn.$ el .show 'slow' if el.nodeType is 1

ko.applyBindings { messages, fadeIn }, container.0


